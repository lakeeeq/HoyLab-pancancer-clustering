function [fileReadName,startTimeStamp,scanOutput] = readmzML_altisSRM(fileName)
%%%this read specifically Full_MS -> AIF + DIA by QE-HFX
%%%mzML generated by MSconvert Version: 3.0.18165-fd93202f5
%%%at 64bit and with zlib compression
%can also read wiff from qtrap
timeThreshold = 5e-4;
fileReadName = '';
startTimeStamp = '';
% scanOutput = '';
%%%%read header Info%%%%
fid = fopen(fileName);
while 1%%get file name
    txtString = fgetl(fid);
    if ~isempty(regexp(txtString,'<sourceFile id='))
        hitName = regexp(txtString,'name=');
        hitQuote = regexp(txtString,'"');
        hitQuote(hitQuote<hitName) = [];
        fileReadName = txtString(hitQuote(1)+1:hitQuote(2)-1);
        break
    end
end
while 1%%get time stamp
    txtString = fgetl(fid);
    hitLead = regexp(txtString,'startTimeStamp=');
    if ~isempty(hitLead)
        hitQuote = regexp(txtString,'"');
        hitQuote(hitQuote<hitLead) = [];
        startTimeStamp=txtString(hitQuote(1)+1:hitQuote(2)-1);
        break
    end
end
% return
while 1%%get no. of scans
    txtString = fgetl(fid);
    hitLead = regexp(txtString,'<chromatogramList count=');%%%for Altis
    if ~isempty(hitLead)
        hitQuote = regexp(txtString,'"');
        hitQuote(hitQuote<hitLead) = [];
        totNoScans = str2double(txtString(hitQuote(1)+1:hitQuote(2)-1));
        break
    end
end
scanOutput = cell(totNoScans,6);
%%%1-scan index; 2-scan ID; 3-scan time; 4-isolation window;
%%%5-mz; 6-intensity

toDoNow = 'readHeader';
cc = 1;
while 1
    txtString = fgetl(fid);
    if txtString == -1
        break
    end
    switch toDoNow
        case 'readHeader'
            hitLead = regexp(txtString,'<chromatogram index=');
            if ~isempty(hitLead)
                hitQuote = regexp(txtString,'"');
                hitQuote(hitQuote<hitLead) = [];
                scanOutput{cc,1} = str2double(txtString(hitQuote(1)+1:hitQuote(2)-1));
                scanOutput{cc,2} = txtString(hitQuote(3)+1:hitQuote(4)-1);
                if strcmp(scanOutput{cc,2},'TIC')
                    toDoNow = 'readTime';
                else
                    toDoNow = 'getIsolationWindow_prec';
                end                
            end

        case 'getIsolationWindow_prec'
            hitLead = regexp(txtString,'<isolationWindow>');
            if ~isempty(hitLead)
                txtString = fgetl(fid);                              
                hitLead = regexp(txtString,'value=');
                hitQuote = regexp(txtString,'"');
                hitQuote(hitQuote<hitLead) = [];
                scanOutput{cc,3} = str2double(txtString(hitQuote(1)+1:hitQuote(2)-1));
                toDoNow = 'getIsolationWindow_prod';
            end
            case 'getIsolationWindow_prod'
            hitLead = regexp(txtString,'<isolationWindow>');
            if ~isempty(hitLead)
                txtString = fgetl(fid);                              
                hitLead = regexp(txtString,'value=');
                hitQuote = regexp(txtString,'"');
                hitQuote(hitQuote<hitLead) = [];
                scanOutput{cc,4} = str2double(txtString(hitQuote(1)+1:hitQuote(2)-1));
                toDoNow = 'readTime';
            end
        case 'readTime'
            hitLead = regexp(txtString,'<binary>');
            if ~isempty(hitLead)
                hitStart = regexp(txtString,'>');
                hitStop = regexp(txtString,'<');
                scanOutput{cc,5} = txtString(hitStart(1)+1:hitStart(2)-1);                
                toDoNow = 'readIntensity';
            end
        case 'readIntensity'
            hitLead = regexp(txtString,'<binary>');
            if ~isempty(hitLead)
                hitStart = regexp(txtString,'>');
                hitStop = regexp(txtString,'<');
                scanOutput{cc,6} = txtString(hitStart(1)+1:hitStart(2)-1);                
                toDoNow = 'readHeader';
                cc = cc + 1;
            end
    end            
end
fclose(fid);
while 1
    if isempty(scanOutput{end,1})
        scanOutput(end,:) = [];
    else
        break
    end
end

base64 = org.apache.commons.codec.binary.Base64;
for i = 1:size(scanOutput,1)
    try
        output = base64.decode(uint8(scanOutput{i,5}));
    catch
        continue
    end
    buffer = java.io.ByteArrayOutputStream();
    zlib = java.util.zip.InflaterOutputStream(buffer);
    zlib.write(output, 0, numel(output));
    zlib.close();
    timeLine = typecast(buffer.toByteArray(), 'double')';
    
    output = base64.decode(uint8(scanOutput{i,6}));
    buffer = java.io.ByteArrayOutputStream();
    zlib = java.util.zip.InflaterOutputStream(buffer);
    zlib.write(output, 0, numel(output));
    zlib.close();
    intLine = typecast(buffer.toByteArray(), 'double')';
    
    if isempty(scanOutput{i,3})
        scanOutput{i,5} = timeLine;
        scanOutput{i,6} = intLine;
        continue
    end
    
    %%%take average of next by adding to current one, repeat
%     repeated = 0;
    while 1
        timeDiff = diff(timeLine);
        timeDiffSmall = [false timeDiff<timeThreshold];
        if ~any(timeDiffSmall)
            scanOutput{i,5} = timeLine;
            scanOutput{i,6} = intLine;
            break
        end
        hitIndex = find(timeDiffSmall);
        intLine(hitIndex-1) = (intLine(hitIndex-1)+intLine(hitIndex))/2;
        timeLine = timeLine(~timeDiffSmall);
        intLine = intLine(~timeDiffSmall);
%         repeated = repeated + 1;
    end
%     if repeated>1
%     end
end
